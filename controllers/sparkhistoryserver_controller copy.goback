/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"time"

	"github.com/go-logr/logr"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	kubricksv1 "kubricks.io/sparkhistoryserver/api/v1"
)

// SparkHistoryServerReconciler reconciles a SparkHistoryServer object
type SparkHistoryServerReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=kubricks.kubricks.io,resources=sparkhistoryservers,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=kubricks.kubricks.io,resources=sparkhistoryservers/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=kubricks.kubricks.io,resources=sparkhistoryservers/finalizers,verbs=update
//+kubebuilder:rbac:groups=api.core.v1,resources=services,verbs=get;list;watch;create;update;patch;delete

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the SparkHistoryServer object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.11.2/pkg/reconcile
func (r *SparkHistoryServerReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	_ = log.FromContext(ctx)
	log := r.Log.WithValues("Sparkhistoryserver", req.NamespacedName)

	// TODO(user): your logic here

	var sparkhistoryserver kubricksv1.SparkHistoryServer

	// Ensure that the service is created for the sparkhistoryserver
	log.Info("Ensuring Service is created", "sparkhistoryserver", req.NamespacedName)
	var sparkhistoryserverService corev1.Service
	if err := r.Get(ctx, req.NamespacedName, &sparkhistoryserverService); err != nil {
		log.Info("unable to fetch Deployment for sparkhistoryserver", "sparkhistoryserver", req.NamespacedName)
		// Create the service
		return r.CreateService(ctx, req, sparkhistoryserver, log)
	}

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *SparkHistoryServerReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&kubricksv1.SparkHistoryServer{}).
		Complete(r)
}

// CreateService creates the desired service in the cluster
func (r *SparkHistoryServerReconciler) CreateService(ctx context.Context, req ctrl.Request, sparkhistoryserver kubricksv1.SparkHistoryServer, log logr.Logger) (ctrl.Result, error) {
	var sparkhistoryserverService *corev1.Service
	sparkhistoryserverService = &corev1.Service{
		ObjectMeta: metav1.ObjectMeta{
			Labels:    sparkhistoryserver.ObjectMeta.Labels,
			Name:      req.Name,
			Namespace: req.Namespace,
		},
		Spec: corev1.ServiceSpec{
			Ports: []corev1.ServicePort{
				{
					Port: 9898,
				},
			},
			Selector: sparkhistoryserver.ObjectMeta.Labels,
		},
	}
	if err := r.Create(ctx, sparkhistoryserverService); err != nil {
		log.Error(err, "unable to create sparkhistoryserver service for sparkhistoryserver", "sparkhistoryserver", sparkhistoryserverService)
		return ctrl.Result{}, err
	}

	log.V(1).Info("created sparkhistoryserver service for sparkhistoryserver run", "sparkhistoryserverPod", sparkhistoryserverService)
	return ctrl.Result{RequeueAfter: 10 * time.Second}, nil
}
